// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 3UGM9QESBjorrc4Kg2zYnR
// Component: wLchbCnIJO
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Avatar from "../../Avatar"; // plasmic-import: nlJSX5qOBl/component
import Separator from "../../Separator"; // plasmic-import: bPy7gX0I0X/component
import SideNavButton from "../../SideNavButton"; // plasmic-import: iHNJiietho/component

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_blank_project.module.css"; // plasmic-import: 3UGM9QESBjorrc4Kg2zYnR/projectcss
import * as sty from "./PlasmicSideBar.module.css"; // plasmic-import: wLchbCnIJO/css

import BaselineSettings20PxsvgIcon from "./icons/PlasmicIcon__BaselineSettings20Pxsvg"; // plasmic-import: qjwdShtAs/icon
import BaselineHelp24PxsvgIcon from "./icons/PlasmicIcon__BaselineHelp24Pxsvg"; // plasmic-import: CCASS4Jkn/icon

export type PlasmicSideBar__VariantMembers = {};

export type PlasmicSideBar__VariantsArgs = {};
type VariantPropType = keyof PlasmicSideBar__VariantsArgs;
export const PlasmicSideBar__VariantProps = new Array<VariantPropType>();

export type PlasmicSideBar__ArgsType = {};
type ArgPropType = keyof PlasmicSideBar__ArgsType;
export const PlasmicSideBar__ArgProps = new Array<ArgPropType>();

export type PlasmicSideBar__OverridesType = {
  sideBarWrapper?: p.Flex<"nav">;
  mainNav?: p.Flex<"div">;
  avatar?: p.Flex<typeof Avatar>;
  img?: p.Flex<"img">;
  separator?: p.Flex<typeof Separator>;
  utilityNav?: p.Flex<"div">;
};

export interface DefaultSideBarProps {
  className?: string;
}

function PlasmicSideBar__RenderFunc(props: {
  variants: PlasmicSideBar__VariantsArgs;
  args: PlasmicSideBar__ArgsType;
  overrides: PlasmicSideBar__OverridesType;
  dataFetches?: PlasmicSideBar__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  return (
    <nav
      data-plasmic-name={"sideBarWrapper"}
      data-plasmic-override={overrides.sideBarWrapper}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        defaultcss.all,
        projectcss.root_reset,
        sty.sideBarWrapper
      )}
    >
      <div
        data-plasmic-name={"mainNav"}
        data-plasmic-override={overrides.mainNav}
        className={classNames(defaultcss.all, sty.mainNav)}
      >
        <Avatar
          data-plasmic-name={"avatar"}
          data-plasmic-override={overrides.avatar}
          avatarImage={
            <img
              data-plasmic-name={"img"}
              data-plasmic-override={overrides.img}
              alt={""}
              className={classNames(defaultcss.img, sty.img)}
              role={"img"}
              src={
                "/plasmic/blank_project/images/_8E3B8Da3A0344077Bbe6835A17D49A84Jpg.jpeg"
              }
            />
          }
          className={classNames("__wab_instance", sty.avatar)}
        />
      </div>

      <Separator
        data-plasmic-name={"separator"}
        data-plasmic-override={overrides.separator}
        className={classNames("__wab_instance", sty.separator)}
        sideBarSeparator={"sideBarSeparator" as const}
      />

      <div
        data-plasmic-name={"utilityNav"}
        data-plasmic-override={overrides.utilityNav}
        className={classNames(defaultcss.all, sty.utilityNav)}
      >
        <SideNavButton
          className={classNames("__wab_instance", sty.sideNavButton__d0Oiw)}
        >
          <BaselineSettings20PxsvgIcon
            className={classNames(defaultcss.all, sty.svg__sqH7X)}
            role={"img"}
          />
        </SideNavButton>

        <SideNavButton
          className={classNames("__wab_instance", sty.sideNavButton__cn5GO)}
        >
          <BaselineHelp24PxsvgIcon
            className={classNames(defaultcss.all, sty.svg__iaHv0)}
            role={"img"}
          />
        </SideNavButton>
      </div>
    </nav>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  sideBarWrapper: [
    "sideBarWrapper",
    "mainNav",
    "avatar",
    "img",
    "separator",
    "utilityNav"
  ],
  mainNav: ["mainNav", "avatar", "img"],
  avatar: ["avatar", "img"],
  img: ["img"],
  separator: ["separator"],
  utilityNav: ["utilityNav"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  sideBarWrapper: "nav";
  mainNav: "div";
  avatar: typeof Avatar;
  img: "img";
  separator: typeof Separator;
  utilityNav: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicSideBar__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicSideBar__VariantsArgs;
    args?: PlasmicSideBar__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicSideBar__Fetches;
  } & Omit<PlasmicSideBar__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicSideBar__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicSideBar__ArgProps,
      internalVariantPropNames: PlasmicSideBar__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicSideBar__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "sideBarWrapper") {
    func.displayName = "PlasmicSideBar";
  } else {
    func.displayName = `PlasmicSideBar.${nodeName}`;
  }
  return func;
}

export const PlasmicSideBar = Object.assign(
  // Top-level PlasmicSideBar renders the root element
  makeNodeComponent("sideBarWrapper"),
  {
    // Helper components rendering sub-elements
    mainNav: makeNodeComponent("mainNav"),
    avatar: makeNodeComponent("avatar"),
    img: makeNodeComponent("img"),
    separator: makeNodeComponent("separator"),
    utilityNav: makeNodeComponent("utilityNav"),

    // Metadata about props expected for PlasmicSideBar
    internalVariantProps: PlasmicSideBar__VariantProps,
    internalArgProps: PlasmicSideBar__ArgProps
  }
);

export default PlasmicSideBar;
/* prettier-ignore-end */
